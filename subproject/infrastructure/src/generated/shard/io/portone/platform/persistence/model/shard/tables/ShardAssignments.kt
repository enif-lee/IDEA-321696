/*
 * This file is generated by jOOQ.
 */
package io.portone.platform.persistence.model.shard.tables


import io.portone.platform.persistence.model.shard.Shard
import io.portone.platform.persistence.model.shard.keys.SHARD_ASSIGNMENTS_PKEY
import io.portone.platform.persistence.model.shard.keys.SHARD_ASSIGNMENTS__SHARD_ASSIGNMENTS_SHARD_ID_FKEY
import io.portone.platform.persistence.model.shard.tables.records.ShardAssignmentsRecord

import java.time.OffsetDateTime

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ShardAssignments(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, ShardAssignmentsRecord>?,
    aliased: Table<ShardAssignmentsRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<ShardAssignmentsRecord>(
    alias,
    Shard.SHARD,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>shard.shard_assignments</code>
         */
        val SHARD_ASSIGNMENTS: ShardAssignments = ShardAssignments()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ShardAssignmentsRecord> = ShardAssignmentsRecord::class.java

    /**
     * The column <code>shard.shard_assignments.id</code>.
     */
    val ID: TableField<ShardAssignmentsRecord, String?> = createField(DSL.name("id"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>shard.shard_assignments.shard_id</code>.
     */
    val SHARD_ID: TableField<ShardAssignmentsRecord, String?> = createField(DSL.name("shard_id"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>shard.shard_assignments.created_at</code>.
     */
    val CREATED_AT: TableField<ShardAssignmentsRecord, OffsetDateTime?> = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "")

    private constructor(alias: Name, aliased: Table<ShardAssignmentsRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<ShardAssignmentsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>shard.shard_assignments</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>shard.shard_assignments</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>shard.shard_assignments</code> table reference
     */
    constructor(): this(DSL.name("shard_assignments"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, ShardAssignmentsRecord>): this(Internal.createPathAlias(child, key), child, key, SHARD_ASSIGNMENTS, null)
    override fun getSchema(): Schema? = if (aliased()) null else Shard.SHARD
    override fun getPrimaryKey(): UniqueKey<ShardAssignmentsRecord> = SHARD_ASSIGNMENTS_PKEY
    override fun getReferences(): List<ForeignKey<ShardAssignmentsRecord, *>> = listOf(SHARD_ASSIGNMENTS__SHARD_ASSIGNMENTS_SHARD_ID_FKEY)

    private lateinit var _shards: Shards

    /**
     * Get the implicit join path to the <code>shard.shards</code> table.
     */
    fun shards(): Shards {
        if (!this::_shards.isInitialized)
            _shards = Shards(this, SHARD_ASSIGNMENTS__SHARD_ASSIGNMENTS_SHARD_ID_FKEY)

        return _shards;
    }

    val shards: Shards
        get(): Shards = shards()
    override fun `as`(alias: String): ShardAssignments = ShardAssignments(DSL.name(alias), this)
    override fun `as`(alias: Name): ShardAssignments = ShardAssignments(alias, this)
    override fun `as`(alias: Table<*>): ShardAssignments = ShardAssignments(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): ShardAssignments = ShardAssignments(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): ShardAssignments = ShardAssignments(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): ShardAssignments = ShardAssignments(name.getQualifiedName(), null)
}
